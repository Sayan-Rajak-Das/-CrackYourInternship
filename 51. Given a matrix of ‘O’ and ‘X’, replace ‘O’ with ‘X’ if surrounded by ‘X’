// -- Question from GeeksforGeeks --

class Solution {
public:
    void dfs(int x, int y, int n, int m, vector<vector<char>>& mat) {
        
        if (x < 0 || x >= n || y < 0 || y >= m || mat[x][y] != 'O')
            return;
        
        mat[x][y] = '#';
        
        // Explore all 4 possible directions
        dfs(x + 1, y, n, m, mat);
        dfs(x - 1, y, n, m, mat);
        dfs(x, y + 1, n, m, mat);
        dfs(x, y - 1, n, m, mat);
    }
    
    vector<vector<char>> fill(int n, int m, vector<vector<char>> mat) {
        // Traverse the boundary and mark all connected 'O's
        for (int i = 0; i < n; ++i) {
            if (mat[i][0] == 'O')
                dfs(i, 0, n, m, mat);
            if (mat[i][m - 1] == 'O')
                dfs(i, m - 1, n, m, mat);
        }
        for (int j = 0; j < m; ++j) {
            if (mat[0][j] == 'O')
                dfs(0, j, n, m, mat);
            if (mat[n - 1][j] == 'O')
                dfs(n - 1, j, n, m, mat);
        }
        
        // Replace all 'O's with 'X's and revert '#' back to 'O's
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < m; ++j) {
                if (mat[i][j] == 'O')
                    mat[i][j] = 'X';
                if (mat[i][j] == '#')
                    mat[i][j] = 'O';
            }
        }
        
        return mat;
    }
};
