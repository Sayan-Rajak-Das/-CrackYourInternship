// -- Question from GeeksforGeeks --

struct SubMatrix {
    int top;
    int left;
    int bottom;
    int right;
};

SubMatrix largestSubMatrixWithEqual01(vector<vector<int>> &mat) {
    int rows = mat.size();
    int cols = mat[0].size();
    SubMatrix result = {0, 0, 0, 0};
    int maxArea = 0;

    // Replace 0 with -1
    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; ++j) {
            if (mat[i][j] == 0) {
                mat[i][j] = -1;
            }
        }
    }

    // Process all pairs of rows
    for (int top = 0; top < rows; ++top) {
        vector<int> sum(cols, 0);
        for (int bottom = top; bottom < rows; ++bottom) {
            for (int col = 0; col < cols; ++col) {
                sum[col] += mat[bottom][col];
            }

            // Find the largest subarray with sum 0
            unordered_map<int, int> sumMap;
            sumMap[0] = -1;  // To handle the sum 0 at the start
            int currSum = 0;
            for (int col = 0; col < cols; ++col) {
                currSum += sum[col];
                if (sumMap.find(currSum) != sumMap.end()) {
                    int startCol = sumMap[currSum] + 1;
                    int area = (bottom - top + 1) * (col - startCol + 1);
                    if (area > maxArea) {
                        maxArea = area;
                        result = {top, startCol, bottom, col};
                    }
                } else {
                    sumMap[currSum] = col;
                }
            }
        }
    }

    return result;
}
