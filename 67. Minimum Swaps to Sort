// -- Question from GeeksforGeeks --

class Solution 
{
    public:
	int minSwaps(vector<int>& nums)
	{
	    int n = nums.size();
	    vector<pair<int, int>> arr(n);

	    for (int i = 0; i < n; i++) {
	        arr[i] = {nums[i], i};
	    }

	    sort(arr.begin(), arr.end());

	    vector<bool> visited(n, false);
	    int swaps = 0;


	    for (int i = 0; i < n; i++) {
	        if (visited[i] || arr[i].second == i) {
	            continue;
	        }

	        int cycle_size = 0;
	        int j = i;

	        // Count the size of the cycle
	        while (!visited[j]) {
	            visited[j] = true;
	            j = arr[j].second;
	            cycle_size++;
	        }

	        // If there is a cycle of size x, it takes x-1 swaps to sort it
	        if (cycle_size > 1) {
	            swaps += (cycle_size - 1);
	        }
	    }

	    return swaps;
	}
};
