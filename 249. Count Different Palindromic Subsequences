class Solution {
public:
    int countPalindromicSubsequences(string s) {
        const long long MOD = 1e9 + 7;
        int n = s.size();
        vector<vector<long long>> dp(n, vector<long long>(n, 0));

        for (int length = 1; length <= n; ++length) {
            for (int i = 0; i + length - 1 < n; ++i) {
                int j = i + length - 1;

                if (i == j) {
                    dp[i][j] = 1;  // A single character is a palindrome
                } else if (s[i] == s[j]) {
                    int l = i + 1, r = j - 1;
                    while (l <= r && s[l] != s[i]) ++l;
                    while (l <= r && s[r] != s[j]) --r;
                    
                    if (l > r) {
                        dp[i][j] = (dp[i + 1][j - 1] * 2 + 2) % MOD;
                    } else if (l == r) {
                        dp[i][j] = (dp[i + 1][j - 1] * 2 + 1) % MOD;
                    } else {
                        dp[i][j] = (dp[i + 1][j - 1] * 2 - dp[l + 1][r - 1] + MOD) % MOD;
                    }
                } else {
                    dp[i][j] = (dp[i + 1][j] + dp[i][j - 1] - dp[i + 1][j - 1] + MOD) % MOD;
                }
            }
        }

        return dp[0][n - 1];
    }
};
