#include <vector>
#include <queue>
#include <algorithm>

using namespace std;

class Solution {
public:
    int swimInWater(vector<vector<int>>& grid) {
        int n = grid.size();
        vector<vector<bool>> visited(n, vector<bool>(n, false));
        
        priority_queue<pair<int, pair<int, int>>, vector<pair<int, pair<int, int>>>, greater<pair<int, pair<int, int>>>> pq;
        
        pq.push({grid[0][0], {0, 0}});
        visited[0][0] = true;
        
 
        vector<int> dir = {0, 1, 0, -1, 0};
        
        while (!pq.empty()) {
            auto [elevation, pos] = pq.top();
            int x = pos.first, y = pos.second;
            pq.pop();
            
 
            if (x == n - 1 && y == n - 1) {
                return elevation;
            }
            
            // Explore 4-directionally adjacent cells
            for (int i = 0; i < 4; ++i) {
                int nx = x + dir[i], ny = y + dir[i + 1];
                
                if (nx >= 0 && nx < n && ny >= 0 && ny < n && !visited[nx][ny]) {
                    visited[nx][ny] = true;
                    pq.push({max(elevation, grid[nx][ny]), {nx, ny}});
                }
            }
        }
        
        return -1; // This should never be reached since there is always a path
    }
};
