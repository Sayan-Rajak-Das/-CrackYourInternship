// -- Question from GeeksforGeeks --

class Solution {
  public:
    void shortest_distance(vector<vector<int>>& matrix) {
        int n = matrix.size();
        
        // Replace all -1s with a large number to represent infinity (except diagonal)
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < n; j++) {
                if (matrix[i][j] == -1 && i != j) {
                    matrix[i][j] = INT_MAX;
                }
            }
        }
        
        // Apply Floyd-Warshall Algorithm
        for (int k = 0; k < n; k++) {
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    if (matrix[i][k] != INT_MAX && matrix[k][j] != INT_MAX && 
                        matrix[i][k] + matrix[k][j] < matrix[i][j]) {
                        matrix[i][j] = matrix[i][k] + matrix[k][j];
                    }
                }
            }
        }
        
        // Convert INT_MAX back to -1 to indicate no path exists
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < n; j++) {
                if (matrix[i][j] == INT_MAX) {
                    matrix[i][j] = -1;
                }
            }
        }
    }
};
