class Solution {
public:
    int largestRectangleArea(std::vector<int>& heights) {
        int n = heights.size();
        std::vector<int> next = nextSmaller(heights, n);
        std::vector<int> prev = prevSmaller(heights, n);
        
        int area = 0;
        for (int i = 0; i < n; ++i) {
            int l = heights[i];
            if (next[i] == -1) {
                next[i] = n;
            }
            int w = next[i] - prev[i] - 1;
            int newArea = l * w;
            area = std::max(area, newArea);
        }
        
        return area;
    }

private:
    std::vector<int> nextSmaller(const std::vector<int>& heights, int n) {
        std::stack<int> s;
        s.push(-1);
        std::vector<int> ans(n);
        
        for (int i = n - 1; i >= 0; --i) {
            int curr = heights[i];
            while (s.top() != -1 && heights[s.top()] >= curr) {
                s.pop();
            }
            ans[i] = s.top();
            s.push(i);
        }
        
        return ans;
    }
    
    std::vector<int> prevSmaller(const std::vector<int>& heights, int n) {
        std::stack<int> s;
        s.push(-1);
        std::vector<int> ans(n);
        
        for (int i = 0; i < n; ++i) {
            int curr = heights[i];
            while (s.top() != -1 && heights[s.top()] >= curr) {
                s.pop();
            }
            ans[i] = s.top();
            s.push(i);
        }
        
        return ans;
    }
};
