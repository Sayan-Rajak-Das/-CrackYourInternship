class Solution {
public:
    int largestIsland(vector<vector<int>>& grid) {
        int n = grid.size();
        int islandIndex = 2; // Start island indices from 2, as 0 and 1 are already in use
        unordered_map<int, int> islandSize; // Map to store the size of each island by index
        int maxIslandSize = 0;

        // Function to perform DFS and label islands
        function<int(int, int, int)> dfs = [&](int x, int y, int index) {
            if (x < 0 || y < 0 || x >= n || y >= n || grid[x][y] != 1) return 0;
            grid[x][y] = index; // Mark the cell with the current island index
            return 1 + dfs(x + 1, y, index) + dfs(x - 1, y, index) + dfs(x, y + 1, index) + dfs(x, y - 1, index);
        };

        // First pass: Label all islands with unique indices and record their sizes
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                if (grid[i][j] == 1) {
                    int size = dfs(i, j, islandIndex);
                    islandSize[islandIndex++] = size;
                    maxIslandSize = max(maxIslandSize, size);
                }
            }
        }

        // Second pass: Check each 0 cell and calculate the maximum island size by flipping it
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                if (grid[i][j] == 0) {
                    unordered_set<int> seen;
                    int newSize = 1; // If we flip this 0, the new island size starts from 1
                    for (auto [dx, dy] : vector<pair<int, int>>{{0, 1}, {0, -1}, {1, 0}, {-1, 0}}) {
                        int x = i + dx, y = j + dy;
                        if (x >= 0 && y >= 0 && x < n && y < n && grid[x][y] > 1 && seen.insert(grid[x][y]).second) {
                            newSize += islandSize[grid[x][y]];
                        }
                    }
                    maxIslandSize = max(maxIslandSize, newSize);
                }
            }
        }

        return maxIslandSize;
    }
};
