from typing import List

class Solution:
    def countRangeSum(self, nums: List[int], lower: int, upper: int) -> int:
        def merge_sort_and_count(prefix, left, right, lower, upper):
            if right - left <= 1:
                return 0
            
            mid = left + (right - left) // 2
            count = merge_sort_and_count(prefix, left, mid, lower, upper) + \
                    merge_sort_and_count(prefix, mid, right, lower, upper)
            
            # Count the number of valid range sums
            l = mid
            r = mid
            for i in range(left, mid):
                while l < right and prefix[l] - prefix[i] < lower:
                    l += 1
                while r < right and prefix[r] - prefix[i] <= upper:
                    r += 1
                count += r - l

            # Merge the two halves
            merged = []
            j = mid
            for i in range(left, mid):
                while j < right and prefix[j] < prefix[i]:
                    merged.append(prefix[j])
                    j += 1
                merged.append(prefix[i])
            while j < right:
                merged.append(prefix[j])
                j += 1

            # Copy the sorted merged result back to the original prefix array
            prefix[left:right] = merged
            
            return count
        
        n = len(nums)
        prefix = [0] * (n + 1)
        
        for i in range(n):
            prefix[i + 1] = prefix[i] + nums[i]
        
        return merge_sort_and_count(prefix, 0, n + 1, lower, upper)
