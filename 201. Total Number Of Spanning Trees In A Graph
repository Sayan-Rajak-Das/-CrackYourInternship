// -- Question from GeeksforGeeks --

class Solution {
public:
    int countSpanningTrees(vector<vector<int>>& graph, int n, int m) {
        // Initialize Laplacian matrix
        vector<vector<int>> laplacian(n, vector<int>(n, 0));

        // Build Laplacian matrix
        for (auto& edge : graph) {
            int u = edge[0], v = edge[1];
            laplacian[u][u]++;
            laplacian[v][v]++;
            laplacian[u][v]--;
            laplacian[v][u]--;
        }

        // Calculate determinant of any cofactor (here removing first row and column)
        return calculateDeterminant(laplacian, n - 1);
    }

private:
    int calculateDeterminant(vector<vector<int>>& mat, int n) {
        if (n == 1) return mat[0][0];
        if (n == 2) return mat[0][0] * mat[1][1] - mat[0][1] * mat[1][0];

        int det = 0;
        vector<vector<int>> subMat(n, vector<int>(n, 0));

        for (int x = 0; x < n; x++) {
            int subi = 0;
            for (int i = 1; i < n; i++) {
                int subj = 0;
                for (int j = 0; j < n; j++) {
                    if (j == x) continue;
                    subMat[subi][subj] = mat[i][j];
                    subj++;
                }
                subi++;
            }
            int sign = (x % 2 == 0) ? 1 : -1;
            det += sign * mat[0][x] * calculateDeterminant(subMat, n - 1);
        }

        return det;
    }
};
