// -- Question from GeeksforGeeks --

class Solution {
public:
    void solve(int i, int j, vector<vector<int>> &mat, int n, vector<string> &result, string path, vector<vector<int>> &visited) {
        if (i == n - 1 && j == n - 1) {
            result.push_back(path);
            return;
        }

        // Move Down
        if (i + 1 < n && mat[i + 1][j] == 1 && !visited[i + 1][j]) {
            visited[i][j] = 1;
            solve(i + 1, j, mat, n, result, path + 'D', visited);
            visited[i][j] = 0;
        }

        // Move Left
        if (j - 1 >= 0 && mat[i][j - 1] == 1 && !visited[i][j - 1]) {
            visited[i][j] = 1;
            solve(i, j - 1, mat, n, result, path + 'L', visited);
            visited[i][j] = 0;
        }

        // Move Right
        if (j + 1 < n && mat[i][j + 1] == 1 && !visited[i][j + 1]) {
            visited[i][j] = 1;
            solve(i, j + 1, mat, n, result, path + 'R', visited);
            visited[i][j] = 0;
        }

        // Move Up
        if (i - 1 >= 0 && mat[i - 1][j] == 1 && !visited[i - 1][j]) {
            visited[i][j] = 1;
            solve(i - 1, j, mat, n, result, path + 'U', visited);
            visited[i][j] = 0;
        }
    }

    vector<string> findPath(vector<vector<int>> &mat) {
        vector<string> result;
        int n = mat.size();
        if (mat[0][0] == 0 || mat[n - 1][n - 1] == 0) {
            return result; // If the source or destination is blocked, return an empty list
        }

        vector<vector<int>> visited(n, vector<int>(n, 0));
        solve(0, 0, mat, n, result, "", visited);
        return result;
    }
};
