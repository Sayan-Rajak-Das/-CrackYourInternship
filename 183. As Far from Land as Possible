class Solution {
public:
    int maxDistance(vector<vector<int>>& grid) {
        int n = grid.size();
        queue<pair<int, int>> q;
        
        // Step 1: Push all land cells into the queue
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                if (grid[i][j] == 1) {
                    q.push({i, j});
                }
            }
        }
        
        // If there is no water or no land, return -1
        if (q.empty() || q.size() == n * n) return -1;
        
        // Directions array for moving up, down, left, right
        vector<pair<int, int>> directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
        
        int maxDist = -1;
        
        // Step 2: Perform BFS from all land cells
        while (!q.empty()) {
            auto [x, y] = q.front();
            q.pop();
            
            for (auto& dir : directions) {
                int nx = x + dir.first;
                int ny = y + dir.second;
                
                // If the next cell is within bounds and is water
                if (nx >= 0 && ny >= 0 && nx < n && ny < n && grid[nx][ny] == 0) {
                    grid[nx][ny] = grid[x][y] + 1;  // Mark the distance
                    maxDist = max(maxDist, grid[nx][ny] - 1);
                    q.push({nx, ny});
                }
            }
        }
        
        return maxDist;
    }
};
