class Solution {
public:
    vector<int> restoreArray(vector<vector<int>>& adjacentPairs) {
        // Step 1: Build adjacency list (undirected graph)
        unordered_map<int, vector<int>> adj;
        for (const auto& pair : adjacentPairs) {
            adj[pair[0]].push_back(pair[1]);
            adj[pair[1]].push_back(pair[0]);
        }
        
        // Step 2: Find the starting element (which has only 1 neighbor)
        int start;
        for (const auto& [key, neighbors] : adj) {
            if (neighbors.size() == 1) {
                start = key;
                break;
            }
        }
        
        // Step 3: Restore the array by traversing the adjacency list
        int n = adjacentPairs.size() + 1; // Since we have n-1 pairs
        vector<int> result(n);
        unordered_set<int> visited;
        
        result[0] = start;
        visited.insert(start);
        
        for (int i = 1; i < n; ++i) {
            int last = result[i - 1];
            for (int neighbor : adj[last]) {
                if (!visited.count(neighbor)) {
                    result[i] = neighbor;
                    visited.insert(neighbor);
                    break;
                }
            }
        }
        
        return result;
    }
};
