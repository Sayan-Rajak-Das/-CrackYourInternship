class Solution {
public:
    int makeConnected(int n, vector<vector<int>>& connections) {
        if (connections.size() < n - 1) return -1; // Not enough cables

        // Create an adjacency list for the graph
        vector<vector<int>> adj(n);
        for (const auto& conn : connections) {
            int u = conn[0];
            int v = conn[1];
            adj[u].push_back(v);
            adj[v].push_back(u);
        }

        // Declare and initialize visited vector
        vector<bool> visited(n, false);

        // Function to perform DFS
        function<void(int)> dfs = [&](int node) {
            stack<int> s;
            s.push(node);
            while (!s.empty()) {
                int curr = s.top();
                s.pop();
                for (int neighbor : adj[curr]) {
                    if (!visited[neighbor]) {
                        visited[neighbor] = true;
                        s.push(neighbor);
                    }
                }
            }
        };

        int components = 0;

        // Count the number of connected components
        for (int i = 0; i < n; ++i) {
            if (!visited[i]) {
                visited[i] = true;
                dfs(i);
                ++components;
            }
        }

        // Minimum number of cables needed to connect all components
        return components - 1;
    }
};
