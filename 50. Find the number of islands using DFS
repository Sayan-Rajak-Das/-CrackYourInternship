// -- Question from GeeksforGeeks --

class Solution {
public:
    void dfs(vector<vector<char>>& grid, int i, int j) {
        // Check boundary conditions and if the cell is already visited (water)
        if (i < 0 || i >= grid.size() || j < 0 || j >= grid[0].size() || grid[i][j] == '0') {
            return;
        }
        
        // Mark the current cell as visited
        grid[i][j] = '0';
        
        // Visit all 8 possible directions (vertical, horizontal, and diagonal)
        dfs(grid, i + 1, j);     // Down
        dfs(grid, i - 1, j);     // Up
        dfs(grid, i, j + 1);     // Right
        dfs(grid, i, j - 1);     // Left
        dfs(grid, i + 1, j + 1); // Down-Right
        dfs(grid, i - 1, j - 1); // Up-Left
        dfs(grid, i + 1, j - 1); // Down-Left
        dfs(grid, i - 1, j + 1); // Up-Right
    }

    int numIslands(vector<vector<char>>& grid) {
        int count = 0;
        
        for(int i = 0; i < grid.size(); ++i) {
            for(int j = 0; j < grid[0].size(); ++j) {
                if(grid[i][j] == '1') {
                    dfs(grid, i, j);
                    ++count;
                }
            }
        }
        
        return count;
    }
};
