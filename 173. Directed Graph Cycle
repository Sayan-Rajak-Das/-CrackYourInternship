// -- Question from GeeksforGeeks --

class Solution {
  public:
    bool dfsCheck(int node, vector<int> adj[], vector<int>& visited, vector<int>& recStack) {
        visited[node] = 1;
        recStack[node] = 1;

        // Traverse adjacent vertices
        for (auto neighbor : adj[node]) {
            if (!visited[neighbor]) {
                if (dfsCheck(neighbor, adj, visited, recStack)) {
                    return true;
                }
            } 
            // If neighbor is in the recursion stack, a cycle is detected
            else if (recStack[neighbor]) {
                return true;
            }
        }

        // Remove the vertex from the recursion stack
        recStack[node] = 0;
        return false;
    }

    // Function to detect cycle in a directed graph
    bool isCyclic(int V, vector<int> adj[]) {
        vector<int> visited(V, 0);   
        vector<int> recStack(V, 0);   // Recursion stack

        for (int i = 0; i < V; i++) {
            if (!visited[i]) {
                if (dfsCheck(i, adj, visited, recStack)) {
                    return true;
                }
            }
        }

        return false; 
    }
};
