class Solution {
public:
    int shortestBridge(vector<vector<int>>& grid) {
        int n = grid.size();
        vector<pair<int, int>> island1; // To store cells of the first island
        
        // Directions for 4-directional movement
        vector<int> directions = {-1, 0, 1, 0, 0, -1, 0, 1};
        
        // Helper function to perform DFS and mark the first island
        function<void(int, int)> dfs = [&](int x, int y) {
            stack<pair<int, int>> s;
            s.push({x, y});
            grid[x][y] = 2; // Mark cell as part of the first island
            
            while (!s.empty()) {
                auto [cx, cy] = s.top();
                s.pop();
                island1.push_back({cx, cy});
                
                for (int d = 0; d < 8; d += 2) {
                    int nx = cx + directions[d];
                    int ny = cy + directions[d + 1];
                    if (nx >= 0 && nx < n && ny >= 0 && ny < n && grid[nx][ny] == 1) {
                        grid[nx][ny] = 2; // Mark as visited
                        s.push({nx, ny});
                    }
                }
            }
        };

        // Find the first island and mark its cells
        bool found = false;
        for (int i = 0; i < n && !found; ++i) {
            for (int j = 0; j < n && !found; ++j) {
                if (grid[i][j] == 1) {
                    dfs(i, j);
                    found = true;
                }
            }
        }

        // Perform BFS from the cells of the first island
        queue<pair<int, int>> q;
        for (const auto& cell : island1) {
            q.push(cell);
        }

        int distance = 0;
        vector<vector<int>> visited(n, vector<int>(n, 0));

        while (!q.empty()) {
            int size = q.size();
            for (int i = 0; i < size; ++i) {
                auto [x, y] = q.front();
                q.pop();
                
                for (int d = 0; d < 8; d += 2) {
                    int nx = x + directions[d];
                    int ny = y + directions[d + 1];
                    if (nx >= 0 && nx < n && ny >= 0 && ny < n) {
                        if (grid[nx][ny] == 1) {
                            return distance;
                        } else if (grid[nx][ny] == 0 && !visited[nx][ny]) {
                            visited[nx][ny] = 1;
                            q.push({nx, ny});
                        }
                    }
                }
            }
            ++distance;
        }

        return -1; 
    }
};
