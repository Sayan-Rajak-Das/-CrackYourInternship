class NumArray {
private:
    vector<int> tree;
    int n;

public:
    NumArray(vector<int>& nums) {
        n = nums.size();
        tree.resize(2 * n);
        for (int i = 0; i < n; ++i) {
            tree[n + i] = nums[i];
        }
        for (int i = n - 1; i > 0; --i) {
            tree[i] = tree[2 * i] + tree[2 * i + 1];
        }
    }
    
    void update(int index, int val) {
        index += n;
        tree[index] = val;
        for (int i = index; i > 1; i /= 2) {
            tree[i / 2] = tree[i] + tree[i ^ 1];
        }
    }
    
    int sumRange(int left, int right) {
        int sum = 0;
        left += n;
        right += n;
        while (left <= right) {
            if (left % 2 == 1) {
                sum += tree[left];
                left++;
            }
            if (right % 2 == 0) {
                sum += tree[right];
                right--;
            }
            left /= 2;
            right /= 2;
        }
        return sum;
    }
};

/**
 * Your NumArray object will be instantiated and called as such:
 * NumArray* obj = new NumArray(nums);
 * obj->update(index,val);
 * int param_2 = obj->sumRange(left,right);
 */
