// -- Question from GeeksforGeeks --

#include <vector>
#include <algorithm> 

using namespace std;

class Solution {
private:
    void recurPermute(vector<int>& ds, vector<int> &nums, vector<vector<int>>& ans, vector<int>& freq) {
        if (ds.size() == nums.size()) {
            ans.push_back(ds);
            return;
        }
        
        for (int i = 0; i < nums.size(); i++) {
            // Skip used elements or duplicates of the same element
            if (freq[i] || (i > 0 && nums[i] == nums[i - 1] && !freq[i - 1])) {
                continue;
            }
            
            ds.push_back(nums[i]);
            freq[i] = 1;
            recurPermute(ds, nums, ans, freq);
            freq[i] = 0;
            ds.pop_back();
        }
    }
    
public:
    vector<vector<int>> uniquePerms(vector<int> &nums, int n) {
        vector<vector<int>> ans;
        vector<int> ds;
        
        sort(nums.begin(), nums.end());
        vector<int> freq(nums.size(), 0);
        
        recurPermute(ds, nums, ans, freq);
        return ans;
    }
};
