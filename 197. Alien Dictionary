// -- Question from GeeksforGeeks --

class Solution {
public:
    string findOrder(string dict[], int n, int k) {
        vector<int> adj[k]; // Adjacency list for the graph

        // Step 1: Build the graph
        for (int i = 0; i < n - 1; i++) {
            string word1 = dict[i];
            string word2 = dict[i + 1];
            for (int j = 0; j < min(word1.size(), word2.size()); j++) {
                if (word1[j] != word2[j]) {
                    adj[word1[j] - 'a'].push_back(word2[j] - 'a');
                    break;
                }
            }
        }

        // Step 2: Topological sort using Kahn's algorithm (BFS)
        vector<int> indegree(k, 0);
        for (int i = 0; i < k; i++) {
            for (auto it : adj[i]) {
                indegree[it]++;
            }
        }

        queue<int> q;
        for (int i = 0; i < k; i++) {
            if (indegree[i] == 0) {
                q.push(i);
            }
        }

        string topoOrder;
        while (!q.empty()) {
            int node = q.front();
            q.pop();
            topoOrder += (char)(node + 'a');
            for (auto it : adj[node]) {
                indegree[it]--;
                if (indegree[it] == 0) {
                    q.push(it);
                }
            }
        }

        return topoOrder;
    }
};
