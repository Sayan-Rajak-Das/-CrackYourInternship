// -- Question from GeeksforGeeks --

class Solution{
  public:
    bool canPartition(int a[], vector<bool>& visited, int k, int start, int currSum, int target, int n) {
        if (k == 1) return true;
        
        if (currSum == target) {
            return canPartition(a, visited, k - 1, 0, 0, target, n);
        }
        
        for (int i = start; i < n; i++) {
            if (!visited[i] && currSum + a[i] <= target) {
                visited[i] = true;
                if (canPartition(a, visited, k, i + 1, currSum + a[i], target, n)) {
                    return true;
                }
                visited[i] = false;
            }
        }
        
        return false;
    }

    bool isKPartitionPossible(int a[], int n, int k) {
        int totalSum = accumulate(a, a + n, 0);
        
        if (totalSum % k != 0) {
            return false;
        }
        
        int target = totalSum / k;
        vector<bool> visited(n, false);
        
        return canPartition(a, visited, k, 0, 0, target, n);
    }
};
